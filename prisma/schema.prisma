generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
	id String @id @default(uuid())
	CPF String @unique
	email String @unique
	name String
	lastName String
	password String
	sex String
	phone String
	birthdate String
	CEP String
	number Int
	city String
	UF String
	rent Rent[]
	products Product[]
  createdAT DateTime @default(now())
  updateAT DateTime @updatedAt
}

model Rent {
	id String @id @default(uuid())
	date String
	insuranceValue String
	userId String
	user User @relation(fields: [userId], references: [id])
	itemsRentalRent ItemsRentalRent[]
	payment Payment[]
	return Return[]
  createdAT DateTime @default(now())
  updateAT DateTime @updatedAt
}

model Product {
	id String @id @default(uuid())
	name String @unique
	productType String
	productDescription String
	price String
	measure String
	brand String
	tissueType String
	userId String
	user User @relation(fields: [userId], references: [id])
	itemsRentalRent ItemsRentalRent[]
	return Return[]
  createdAT DateTime @default(now())
  updateAT DateTime @updatedAt
}

model ItemsRentalRent {
	rentId String
	productId String
	rent Rent @relation(fields: [rentId], references: [id])
	product Product @relation(fields: [productId], references: [id])
	createdAT DateTime @default(now())
	updateAT DateTime @updatedAt
	@@id([rentId, productId])
}

model Payment {
	id String @default(uuid())
	rentId String
	rent Rent @relation(fields: [rentId], references: [id])
    createdAT DateTime @default(now())
    updateAT DateTime @updatedAt
	@@id([id, rentId])
}

model Return {
	rentId String
	productId String
	createdAT DateTime @default(now())
	returnConfirmation Boolean
	rent Rent @relation(fields: [rentId], references: [id])
	product Product @relation(fields: [productId], references: [id])
	@@id([rentId, productId])
}